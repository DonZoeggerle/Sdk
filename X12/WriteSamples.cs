using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using EdiFabric.Core.Model.Edi.ErrorContexts;
using EdiFabric.Core.Model.Edi.X12;
using EdiFabric.Framework;
using EdiFabric.Framework.Writers;
using EdiFabric.Rules.X12_004010;

namespace EdiFabric.Sdk.X12
{
    /// <summary>
    /// Runs all write samples
    /// Check Output windows for debug data
    /// </summary>
    class WriteSamples
    {
        public static void Run()
        {
            WriteSingleInvoiceToStream();
            WriteSingleInvoiceToFile();
            WriteMultipleInvoices();
            WriteMultipleGroups();
            WriteMultipleInterchanges();
            WriteSegmentWithWhitespace();
            WriteWithCustomSeparators();
        }

        /// <summary>
        /// Generate and write EDI document to a stream
        /// </summary>
        static void WriteSingleInvoiceToStream()
        {
            Debug.WriteLine("******************************");
            Debug.WriteLine(MethodBase.GetCurrentMethod().Name);
            Debug.WriteLine("******************************");

            //  1.  Construct the invoice message with data from database, service or domain objects\logic.
            var invoice = CreateInvoice("00000001");

            //  2.  Validate it to ensure the object adheres to the rule
            //  Always skip trailer validation because all trailers are automatically generated by the writer
            MessageErrorContext errorContext;
            if (invoice.IsValid(out errorContext, true))
            {
                Debug.WriteLine("Message {0} with control number {1} is valid.", errorContext.Name, errorContext.ControlNumber);

                //  3.  Write to a stream
                using (var stream = new MemoryStream())
                {
                    //  4.  Use CRLF(new line) as segment postfix for clarity
                    //  Always agree postfixes and separators with the trading partner
                    var writer = new X12Writer(stream, Encoding.Default, Environment.NewLine);

                    //  5.  Begin with ISA segment
                    writer.Write(CreateIsa("000011111"));
                    //  6.  Follow up with GS segment
                    writer.Write(CreateGs("111111111"));
                    //  7.  Write all transactions
                    writer.Write(invoice);
                    //  No need to close any of the above

                    //  8.  Always flush at the end to release the cache
                    writer.Flush();

                    Debug.Write(LoadString(stream));
                }
            }
            else
            {
                //  The purchase order is invalid
                //  Report it back to the sender, log, etc.

                //  Inspect MessageErrorContext for the validation errors
                var errors = errorContext.Flatten();

                Debug.WriteLine("Message {0} with control number {1} is invalid with errors:", errorContext.Name, errorContext.ControlNumber);
                foreach (var error in errors)
                {
                    Debug.WriteLine(error);
                }
            }
        }

        /// <summary>
        /// Generate and write EDI document to a file
        /// </summary>
        static void WriteSingleInvoiceToFile()
        {
            Debug.WriteLine("******************************");
            Debug.WriteLine(MethodBase.GetCurrentMethod().Name);
            Debug.WriteLine("******************************");

            //  1.  Construct the invoice message with data from database, service or domain objects\logic.
            var invoice = CreateInvoice("00000001");

            const string folder = @"C:\test";
            if (!Directory.Exists(folder))
                Directory.CreateDirectory(folder);

            //  2.  Validate it to ensure the object adheres to the rule
            //  Always skip trailer validation because all trailers are automatically generated by the writer 
            MessageErrorContext errorContext;
            if (invoice.IsValid(out errorContext, true))
            {
                Debug.WriteLine("Message {0} with control number {1} is valid.", errorContext.Name,
                    errorContext.ControlNumber);

                //  3.  Use default encoding and no segment postfix
                //  Write directly to a file
                var writer = new X12Writer(string.Format("{0}\\output.txt", folder), false);

                writer.Write(CreateIsa("000011111"));
                writer.Write(CreateGs("111111111"));
                writer.Write(invoice);

                //  4.  Always flush at the end to release the cache
                writer.Flush();

                writer.Dispose();

                Debug.WriteLine("Written to file.");
            }
            else
            {
                //  The purchase order is invalid
            }
        }

        /// <summary>
        /// Batch multiple transactions in the same functional group\EDI stream
        /// </summary>
        static void WriteMultipleInvoices()
        {
            Debug.WriteLine("******************************");
            Debug.WriteLine(MethodBase.GetCurrentMethod().Name);
            Debug.WriteLine("******************************");

            using (var stream = new MemoryStream())
            {
                var writer = new X12Writer(stream, Encoding.Default, Environment.NewLine);

                writer.Write(CreateIsa("000011111"));
                writer.Write(CreateGs("111111111"));
                
                //  1.  Write the first invoice
                writer.Write(CreateInvoice("00000001"));
                
                //  2.  Write the second invoice
                writer.Write(CreateInvoice("00000002"));

                //  3.  Write any subsequent invoice...

                writer.Flush();

                Debug.Write(LoadString(stream));
            }
        }

        /// <summary>
        /// Batch multiple transactions under multiple functional groups in the same EDI stream
        /// </summary>
        static void WriteMultipleGroups()
        {
            Debug.WriteLine("******************************");
            Debug.WriteLine(MethodBase.GetCurrentMethod().Name);
            Debug.WriteLine("******************************");

            using (var stream = new MemoryStream())
            {
                var writer = new X12Writer(stream, Encoding.Default, Environment.NewLine);

                writer.Write(CreateIsa("000011111"));

                //  1.  Write the first group               
                writer.Write(CreateGs("111111111"));
                //  Write the transactions...
                writer.Write(CreateInvoice("00000001"));

                //  2.  Write the second group
                //  No need to close the previous group with a GE
                writer.Write(CreateGs("222222222"));
                //  Write the transactions...
                writer.Write(CreateInvoice("00000002"));

                writer.Flush();

                Debug.Write(LoadString(stream));
            }
        }

        /// <summary>
        /// Batch multiple interchanges in the same EDI stream
        /// </summary>
        static void WriteMultipleInterchanges()
        {
            Debug.WriteLine("******************************");
            Debug.WriteLine(MethodBase.GetCurrentMethod().Name);
            Debug.WriteLine("******************************");

            using (var stream = new MemoryStream())
            {
                var writer = new X12Writer(stream, Encoding.Default, Environment.NewLine);

                //  1.  Write the first interchange
                writer.Write(CreateIsa("000011111"));
                writer.Write(CreateGs("111111111"));
                writer.Write(CreateInvoice("00000001"));

                //  2.  Write the second interchange
                //  No need to close the previous interchange with a IEA
                writer.Write(CreateIsa("000022222"));
                writer.Write(CreateGs("111111111"));
                writer.Write(CreateInvoice("00000002"));
                
                writer.Flush();

                Debug.Write(LoadString(stream));
            }
        }

        /// <summary>
        /// Write transactions with whitespace
        /// By default properties set to whitespace are omitted 
        /// </summary>
        static void WriteSegmentWithWhitespace()
        {
            Debug.WriteLine("******************************");
            Debug.WriteLine(MethodBase.GetCurrentMethod().Name);
            Debug.WriteLine("******************************");

            var invoice = CreateInvoice("00000001");

            //  Initialize some properties with blanks
            invoice.BIG.ReleaseNumber_05 = "";
            invoice.BIG.ChangeOrderSequenceNumber_06 = "";

            using (var stream = new MemoryStream())
            {
                //  Set the PreserveWhitespace flag to true
                var writer = new X12Writer(stream, null, "", true);

                writer.Write(CreateIsa("000011111"));
                writer.Write(CreateGs("111111111"));
                writer.Write(invoice);

                writer.Flush();

                Debug.Write(LoadString(stream));
            }
        }

        /// <summary>
        /// Write with custom separators
        /// All separators can be set - segment terminator, data element terminator, component data element terminator and repetition delimiter
        /// When not set, the default separators for X12 standard are used
        /// </summary>
        static void WriteWithCustomSeparators()
        {
            Debug.WriteLine("******************************");
            Debug.WriteLine(MethodBase.GetCurrentMethod().Name);
            Debug.WriteLine("******************************");

            var invoice = CreateInvoice("00000001");
            
            using (var stream = new MemoryStream())
            {
                var writer = new X12Writer(stream, Encoding.Default, Environment.NewLine);

                //  Set a custom segment separator.
                var separators = new Separators('|', Separators.X12.ComponentDataElement,
                    Separators.X12.DataElement, Separators.X12.RepetitionDataElement, Separators.X12.Escape);

                //  Write the ISA with the custom separator set
                writer.Write(CreateIsa("000011111"), separators);
                writer.Write(CreateGs("111111111"));
                writer.Write(invoice);

                writer.Flush();

                Debug.Write(LoadString(stream));
            }
        }

        /// <summary>
        /// Sample invoice
        /// </summary>
        static TS810 CreateInvoice(string controlNumber)
        {
            var result = new TS810();

            result.ST = new ST();
            result.ST.TransactionSetIdentifierCode_01 = "810";
            result.ST.TransactionSetControlNumber_02 = controlNumber.PadLeft(9, '0');

            result.BIG = new BIG();
            result.BIG.Date_01 = DateTime.Now.ToString("yyMMdd");
            result.BIG.InvoiceNumber_02 = "123456789";
            result.BIG.Date_03 = "030627";
            result.BIG.PurchaseOrderNumber_04 = "201177";

            result.REF = new List<REF>();

            var ref1 = new REF();
            ref1.ReferenceIdentificationQualifier_01 = "DP";
            ref1.ReferenceIdentification_02 = "123";
            result.REF.Add(ref1);

            var ref2 = new REF();
            ref2.ReferenceIdentificationQualifier_01 = "IA";
            ref2.ReferenceIdentification_02 = "456";
            result.REF.Add(ref2);

            result.N1Loop1 = new List<TS810_N1Loop1>();
            var n1Loop = new TS810_N1Loop1();
            n1Loop.N1 = new N1();
            n1Loop.N1.EntityIdentifierCode_01 = "ST";
            n1Loop.N1.IdentificationCodeQualifier_03 = "18";
            n1Loop.N1.IdentificationCode_04 = "123";
            
            result.N1Loop1.Add(n1Loop);

            result.ITD = new List<ITD>();
            var itd = new ITD();
            itd.TermsTypeCode_01 = "01";
            itd.TermsBasisDateCode_02 = "3";
            itd.TermsDiscountDaysDue_05 = "0";
            itd.TermsNetDays_07 = "45";

            result.IT1Loop1 = new List<TS810_IT1Loop1>();
            var it1Loop = new TS810_IT1Loop1();
            it1Loop.IT1 = new IT1();
            it1Loop.IT1.AssignedIdentification_01 = "1";
            it1Loop.IT1.QuantityInvoiced_02 = "2";
            it1Loop.IT1.UnitorBasisforMeasurementCode_03 = "EA";
            it1Loop.IT1.UnitPrice_04 = "120.6";
            it1Loop.IT1.ProductServiceIDQualifier_06 = "UP";
            it1Loop.IT1.ProductServiceID_07 = "123456789";

            result.IT1Loop1.Add(it1Loop);

            result.TDS = new TDS();
            result.TDS.Amount_01 = "240.12";

            result.CAD = new CAD();
            result.CAD.Routing_05 = "1234";
            result.CAD.ReferenceIdentificationQualifier_07 = "BM";
            result.CAD.ReferenceIdentification_08 = "9999";

            result.CTT = new CTT();
            result.CTT.NumberofLineItems_01 = "1";

            return result;
        }

        /// <summary>
        /// Sample GS
        /// </summary>
        static GS CreateGs(string controlNumber)
        {
            return new GS
            {
                //  Functional ID Code
                CodeIdentifyingInformationType_1 = "IN",
                //  Application Senders Code
                SenderIDCode_2 = "RECEIVER1",
                //  Application Receivers Code
                ReceiverIDCode_3 = "SENDER1",
                //  Date
                Date_4 = DateTime.Now.Date.ToString("yyMMdd"),
                //  Time
                Time_5 = DateTime.Now.TimeOfDay.ToString("hhmm"),
                //  Group Control Number
                //  Must be unique to both partners for this interchange
                GroupControlNumber_6 = controlNumber.PadLeft(9, '0'),
                //  Responsible Agency Code
                TransactionTypeCode_7 = "X",
                //  Version/Release/Industry id code
                VersionAndRelease_8 = "002040"
            };
        }

        /// <summary>
        /// Sample ISA
        /// </summary>
        static ISA CreateIsa(string controlNumber)
        {
            return new ISA
            {
                //  Authorization Information Qualifier
                AuthorizationInformationQualifier_1 = "00",
                //  Authorization Information
                AuthorizationInformation_2 = "          ",
                //  Security Information Qualifier
                SecurityInformationQualifier_3 = "00",
                //  Security Information
                SecurityInformation_4 = "          ",
                //  Interchange ID Qualifier
                SenderIDQualifier_5 = "14",
                //  Interchange Sender
                InterchangeSenderID_6 = "RECEIVER1      ",
                //  Interchange ID Qualifier
                ReceiverIDQualifier_7 = "16",
                //  Interchange Receiver
                InterchangeReceiverID_8 = "SENDER1        ",
                //  Date
                InterchangeDate_9 = DateTime.Now.Date.ToString("yyMMdd"),
                //  Time
                InterchangeTime_10 = DateTime.Now.TimeOfDay.ToString("hhmm"),
                //  Standard identifier
                InterchangeControlStandardsIdentifier_11 = "U",
                //  Interchange Version ID
                //  This is the ISA version and not the transaction sets versions
                InterchangeControlVersionNumber_12 = "00204",
                //  Interchange Control Number
                InterchangeControlNumber_13 = controlNumber.PadLeft(9, '0'),
                //  Acknowledgment Requested (0 or 1)
                AcknowledgementRequested_14 = "1",
                //  Test Indicator
                UsageIndicator_15 = "T",
            };
        }

        static string LoadString(Stream stream)
        {
            stream.Position = 0;
            using (var reader = new StreamReader(stream, Encoding.Default))
            {
                return reader.ReadToEnd();
            }
        }
    }
}
